@charset "UTF-8";

/*
* Vertical Rhythm Properties
* Do this by using various Compass Vertical Rhythm functions and mixins
* This will automatically set line(s) to be $base-line-height * font size
* The lead and or trail multiple can be changed using $leadOrTrailLinesUsed. It is 1 by default (i.e. 1 = $base-line-height * 1)
* Use $top-bottom-both to defined where the lead/trail is used on the element, it is bottom by default
*/
@mixin verticalRhythmProps(
  $theFontSize: null,
  $useMargin: true,
  $top-bottom-both: bottom,
  $differentLineHeight: $theFontSize,
  $leadOrTrailLinesUsed: 1,
  $debugVerticalRhythm: false
  ) {

  $new-line-height: if($differentLineHeight != $theFontSize, lines-for-font-size($differentLineHeight) * $base-line-height, lines-for-font-size($theFontSize) * $base-line-height);
  $lead-or-trail-num: splitUnitAndValue($base-font-size, true);
  //font size and line height
  @if $theFontSize != null {
    font-size: $theFontSize;
    line-height: $new-line-height;
  }
  @if $theFontSize == null and $differentLineHeight != null {
    line-height: $new-line-height;
  }
  @if $useMargin == false {
    @if $debugVerticalRhythm == true {
      @include debug-vertical-alignment;
    }
    @if $top-bottom-both == top {
      @include rhythm($leader: 0, $padding-leader: $leadOrTrailLinesUsed, $padding-trailer: 0, $trailer: 0, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == both {
      @include rhythm($leader: 0, $padding-leader: $leadOrTrailLinesUsed, $padding-trailer: $padding-leader, $trailer: 0, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == bottom {
      @include rhythm($leader: 0, $padding-leader: 0, $padding-trailer: $leadOrTrailLinesUsed, $trailer: 0, $font-size: $base-font-size);
    }
  }
  @else {
    @if $debugVerticalRhythm == true {
      @include debug-vertical-alignment;
    }
    @if $top-bottom-both == top {
      @include rhythm($leader: $leadOrTrailLinesUsed, $padding-leader: 0, $padding-trailer: 0, $trailer: 0, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == both {
      @include rhythm($leader: $leadOrTrailLinesUsed, $padding-leader: 0, $padding-trailer: 0, $trailer: $leadOrTrailLinesUsed, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == bottom {
      @include rhythm($leader: 0 , $padding-leader: 0, $padding-trailer: 0, $trailer: $leadOrTrailLinesUsed, $font-size: $base-font-size);
    }
  }
}

/*
* No Vertical Rhythm
* Remove vertical rhythm properties
*/
@mixin noVerticalRhythm($verticalMargins: both, $verticalPadding: both, $lineHeight: null) {
  //reset vertical padding
  @if $verticalPadding == top {
    padding-top: 0;
  }
  @else if $verticalPadding == bottom {
    padding-bottom: 0;
  }
  @else if $verticalPadding == both {
    padding-top: 0;
    padding-bottom: 0;
  }
  @else {
    @error "The $verticalPadding argument, most be one of the following: top, bottom, or both.";
  }
  //reset vertical margins
  @if $verticalMargins == top {
    margin-top: 0;
  }
  @else if $verticalMargins == bottom {
    margin-bottom: 0;
  }
  @else if $verticalMargins == both {
    margin-top: 0;
    margin-bottom: 0;
  }
  @else {
    @error "The $verticalMargins argument, most be one of the following: top, bottom, or both.";
  }
  //set a new line height
  @if $lineHeight != null {
    line-height: $lineHeight;
  }
}

/*
Float
* The float Mixin accepts any value of float
*/
@mixin float($float: left) {
  float: $float;
}

/*
Clearfix
* fix float box issues
*/
@mixin cf {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*
 * Placeholder image
 * This can be used to add a placeholder image of any size, background color, text color, and placeholder text, as a css background
 */
@mixin placeholderImg($width: 500, $height: $width, $bgColor: $grey, $color: $black, $placholder: null){
  @if $placeholder != null{
    background: url(http://placehold.it/#{$width}x#{$height}/#{$bgColor}/#{$color}&text=#{$placeholder});
  }
  @else{
    background: url(http://placehold.it/#{$width}x#{$height}/#{$bgColor}/#{$color});
  }
  background-size: 100% 100%;
}

/*
 * Placeholder to make indent text
 */
@mixin indentText($indentAmount: $indent){
  text-indent: $indent;
}
/*
* Make Horizontal
* Position block elements horizontally without floating
*/
@mixin makeHorizontal {
    display: inline-block;
    *display: inline;
    zoom: 1;
}
/*
 * No Horizontal Center
 * This removes horizontal centering
 */
@mixin noHorizontalCenter($marginLeft: 0, $marginRight: 0){
  margin-left: $marginLeft;
  margin-right: $marginRight;
}
/*
 * Horizontal Center
 * This adds horizontal centering for block level elements
 */
@mixin horizontalCenter{
  margin-left: auto;
  margin-right: auto;
}
/*
 * Button Colors
 * Use this mixin to update the scales class button colors.
 * The scales default is the cyan button.
 * This defaults to the purple button.
 */
@mixin buttonColors($bg: $dark-purple, $color: $white){
  background-color: $bg;
  color: $color;
}

/*
* Body Font Mixin
* used to set body font on something that would otherwise not have it
*/
@mixin bodyFont {
  font-family: $body-font;
}

/*
* Heading/Title Font Mixin
* used to set heading font on something that would otherwise not have it
*/
@mixin titleFont {
  font-family: $title-font;
}

/*
* Text Size Breakpoint(s) Mixins
*/
@mixin h1-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h1-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h1-font-size-max);
  }
}

@mixin h2-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h2-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h2-font-size-max);
  }
}

@mixin h3-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h3-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h3-font-size-max);
  }
}

@mixin h4-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h4-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h4-font-size-max);
  }
}

@mixin h5-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h5-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h5-font-size-max);
  }
}

@mixin h6-breakpoints {
  @include breakpoint($md) {
    @include verticalRhythmProps($h6-font-size-md);
  }

  @include breakpoint($max) {
    @include verticalRhythmProps($h6-font-size-max);
  }
}

@mixin body-breakpoints {
  @include breakpoint($md) {
    /* font-size: $body-font-size-md;
    line-height: $body-line-height-md; */
    @include verticalRhythmProps($body-font-size-md);
  }

  @include breakpoint($max) {
    // font-size: $body-font-size-max;
    // line-height: $body-line-height-max;
    @include verticalRhythmProps($body-font-size-max);
  }
}

/* @mixin body-copy-rhythm-breakpoints{
    @include breakpoint($lg){
        margin-top: $body-rhythm-lg;
        margin-bottom: $body-rhythm-lg;
    }
    @include breakpoint($max){
        margin-top: $body-rhythm-max;
        margin-bottom: $body-rhythm-max;
    }
} */