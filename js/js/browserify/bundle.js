!function e(t,n,r){function o(s,c){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!c&&l)return l(s,!0);if(i)return i(s,!0);var a=new Error("Cannot find module '"+s+"'");throw a.code="MODULE_NOT_FOUND",a}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){e("../../../../bower_components/REM-unit-polyfill/js/rem.js"),e("../test.js")},{"../../../../bower_components/REM-unit-polyfill/js/rem.js":2,"../test.js":3}],2:[function(e,t,n){!function(e,t){"use strict";var n=function(){var e=document.createElement("div");return e.style.cssText="font-size: 1rem;",/rem/.test(e.style.fontSize)},r=function(){for(var e=document.getElementsByTagName("link"),t=[],n=0;n<e.length;n++)"stylesheet"===e[n].rel.toLowerCase()&&null===e[n].getAttribute("data-norem")&&t.push(e[n].href);return t},o=function(){for(var e=0;e<m.length;e++)u(m[e],i)},i=function(e,t){if(v.push(e.responseText),y.push(t),y.length===m.length){for(var n=0;n<y.length;n++)s(v[n],y[n]);(m=h.slice(0)).length>0?(y=[],v=[],h=[],o()):c()}},s=function(e,t){for(var n,r=d(e).replace(/\/\*[\s\S]*?\*\//g,""),o=/[\w\d\s\-\/\\\[\]:,.'"*()<>+~%#^$_=|@]+\{[\w\d\s\-\/\\%#:!;,.'"*()]+\d*\.?\d+rem[\w\d\s\-\/\\%#:!;,.'"*()]*\}/g,i=r.match(o),s=/\d*\.?\d+rem/g,c=r.match(s),l=/(.*\/)/,a=l.exec(t)[0],u=/@import (?:url\()?['"]?([^'\)"]*)['"]?\)?[^;]*/gm;null!==(n=u.exec(e));)h.push(0===n[1].indexOf("/")?n[1]:a+n[1]);null!==i&&0!==i.length&&(p=p.concat(i),g=g.concat(c))},c=function(){for(var e=/[\w\d\s\-\/\\%#:,.'"*()]+\d*\.?\d+rem[\w\d\s\-\/\\%#:!,.'"*()]*[;}]/g,t=0;t<p.length;t++){f+=p[t].substr(0,p[t].indexOf("{")+1);for(var n=p[t].match(e),r=0;r<n.length;r++)f+=n[r],r===n.length-1&&"}"!==f[f.length-1]&&(f+="\n}")}l()},l=function(){for(var e=0;e<g.length;e++)w[e]=Math.round(parseFloat(g[e].substr(0,g[e].length-3)*x))+"px";a()},a=function(){for(var e=0;e<w.length;e++)w[e]&&(f=f.replace(g[e],w[e]));var t=document.createElement("style");t.setAttribute("type","text/css"),t.id="remReplace",document.getElementsByTagName("head")[0].appendChild(t),t.styleSheet?t.styleSheet.cssText=f:t.appendChild(document.createTextNode(f))},u=function(t,n){try{var r=e.ActiveXObject?new ActiveXObject("Microsoft.XMLHTTP")||new ActiveXObject("Msxml2.XMLHTTP"):new XMLHttpRequest;r.open("GET",t,!0),r.onreadystatechange=function(){4===r.readyState&&n(r,t)},r.send(null)}catch(o){if(e.XDomainRequest){var i=new XDomainRequest;i.open("get",t),i.onload=function(){n(i,t)},i.onerror=function(){return!1},i.send()}}},d=function(t){return e.matchMedia||e.msMatchMedia||(t=t.replace(/@media[\s\S]*?\}\s*\}/g,"")),t};if(!n()){var f="",m=r(),h=[],p=[],g=[],v=[],y=[],w=[],x="";x=function(){var e,t=document,n=t.documentElement,r=t.body||t.createElement("body"),o=!t.body,i=t.createElement("div"),s=r.style.fontSize;return o&&n.appendChild(r),i.style.cssText="width:1em; position:absolute; visibility:hidden; padding: 0;",r.style.fontSize="1em",r.appendChild(i),e=i.offsetWidth,o?n.removeChild(r):(r.removeChild(i),r.style.fontSize=s),e}(),o()}}(window)},{}],3:[function(e,t,n){"use strict"},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,