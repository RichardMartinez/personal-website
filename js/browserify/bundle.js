!function e(t,n,r){function o(s,c){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!c&&l)return l(s,!0);if(i)return i(s,!0);var a=new Error("Cannot find module '"+s+"'");throw a.code="MODULE_NOT_FOUND",a}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){e("../../bower_components/REM-unit-polyfill/js/rem.js"),e("../test.js")},{"../../bower_components/REM-unit-polyfill/js/rem.js":2,"../test.js":3}],2:[function(e,t,n){!function(e,t){"use strict";var n=function(){var e=document.createElement("div");return e.style.cssText="font-size: 1rem;",/rem/.test(e.style.fontSize)},r=function(){for(var e=document.getElementsByTagName("link"),t=[],n=0;n<e.length;n++)"stylesheet"===e[n].rel.toLowerCase()&&null===e[n].getAttribute("data-norem")&&t.push(e[n].href);return t},o=function(){for(var e=0;e<m.length;e++)u(m[e],i)},i=function(e,t){if(v.push(e.responseText),y.push(t),y.length===m.length){for(var n=0;n<y.length;n++)s(v[n],y[n]);(m=h.slice(0)).length>0?(y=[],v=[],h=[],o()):c()}},s=function(e,t){for(var n,r=d(e).replace(/\/\*[\s\S]*?\*\//g,""),o=/[\w\d\s\-\/\\\[\]:,.'"*()<>+~%#^$_=|@]+\{[\w\d\s\-\/\\%#:!;,.'"*()]+\d*\.?\d+rem[\w\d\s\-\/\\%#:!;,.'"*()]*\}/g,i=r.match(o),s=/\d*\.?\d+rem/g,c=r.match(s),l=/(.*\/)/,a=l.exec(t)[0],u=/@import (?:url\()?['"]?([^'\)"]*)['"]?\)?[^;]*/gm;null!==(n=u.exec(e));)h.push(0===n[1].indexOf("/")?n[1]:a+n[1]);null!==i&&0!==i.length&&(p=p.concat(i),g=g.concat(c))},c=function(){for(var e=/[\w\d\s\-\/\\%#:,.'"*()]+\d*\.?\d+rem[\w\d\s\-\/\\%#:!,.'"*()]*[;}]/g,t=0;t<p.length;t++){f+=p[t].substr(0,p[t].indexOf("{")+1);for(var n=p[t].match(e),r=0;r<n.length;r++)f+=n[r],r===n.length-1&&"}"!==f[f.length-1]&&(f+="\n}")}l()},l=function(){for(var e=0;e<g.length;e++)w[e]=Math.round(parseFloat(g[e].substr(0,g[e].length-3)*x))+"px";a()},a=function(){for(var e=0;e<w.length;e++)w[e]&&(f=f.replace(g[e],w[e]));var t=document.createElement("style");t.setAttribute("type","text/css"),t.id="remReplace",document.getElementsByTagName("head")[0].appendChild(t),t.styleSheet?t.styleSheet.cssText=f:t.appendChild(document.createTextNode(f))},u=function(t,n){try{var r=e.ActiveXObject?new ActiveXObject("Microsoft.XMLHTTP")||new ActiveXObject("Msxml2.XMLHTTP"):new XMLHttpRequest;r.open("GET",t,!0),r.onreadystatechange=function(){4===r.readyState&&n(r,t)},r.send(null)}catch(o){if(e.XDomainRequest){var i=new XDomainRequest;i.open("get",t),i.onload=function(){n(i,t)},i.onerror=function(){return!1},i.send()}}},d=function(t){return e.matchMedia||e.msMatchMedia||(t=t.replace(/@media[\s\S]*?\}\s*\}/g,"")),t};if(!n()){var f="",m=r(),h=[],p=[],g=[],v=[],y=[],w=[],x="";x=function(){var e,t=document,n=t.documentElement,r=t.body||t.createElement("body"),o=!t.body,i=t.createElement("div"),s=r.style.fontSize;return o&&n.appendChild(r),i.style.cssText="width:1em; position:absolute; visibility:hidden; padding: 0;",r.style.fontSize="1em",r.appendChild(i),e=i.offsetWidth,o?n.removeChild(r):(r.removeChild(i),r.style.fontSize=s),e}(),o()}}(window)},{}],3:[function(e,t,n){"use strict"},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9icm93c2VyaWZ5L2VudHJ5LmpzIiwiZW50cnkuanMiLCJib3dlcl9jb21wb25lbnRzL1JFTS11bml0LXBvbHlmaWxsL2pzL3JlbS5qcyIsImpzL3Rlc3QuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIi4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvUkVNLXVuaXQtcG9seWZpbGwvanMvcmVtLmpzIiwiLi4vdGVzdC5qcyIsMiwid2luZG93IiwidW5kZWZpbmVkIiwiY3NzcmVtdW5pdCIsImRpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiY3NzVGV4dCIsInRlc3QiLCJmb250U2l6ZSIsImlzU3R5bGVTaGVldCIsInN0eWxlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZmlsdGVyZWRMaW5rcyIsInJlbCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicHVzaCIsImhyZWYiLCJwcm9jZXNzTGlua3MiLCJsaW5rcyIsInhociIsInN0b3JlQ1NTIiwicmVzcG9uc2UiLCJsaW5rIiwicHJlQ1NTIiwicmVzcG9uc2VUZXh0IiwiQ1NTTGlua3MiLCJqIiwibWF0Y2hDU1MiLCJpbXBvcnRMaW5rcyIsInNsaWNlIiwiYnVpbGRDU1MiLCJzaGVldENTUyIsImltcG9ydFN0YXRlbWVudCIsImNsZWFuIiwicmVtb3ZlTWVkaWFRdWVyaWVzIiwicmVwbGFjZSIsInBhdHRlcm4iLCJjdXJyZW50IiwibWF0Y2giLCJyZW1QYXR0ZXJuIiwicmVtQ3VycmVudCIsInNoZWV0UGF0aFBhdHRlcm4iLCJzaGVldFBhdGgiLCJleGVjIiwiaW1wb3J0UGF0dGVybiIsImluZGV4T2YiLCJmb3VuZCIsImNvbmNhdCIsImZvdW5kUHJvcHMiLCJydWxlcyIsInN1YnN0ciIsInBhcnNlQ1NTIiwiY3NzIiwiTWF0aCIsInJvdW5kIiwicGFyc2VGbG9hdCIsImxvYWRDU1MiLCJyZW1jc3MiLCJzZXRBdHRyaWJ1dGUiLCJpZCIsImFwcGVuZENoaWxkIiwic3R5bGVTaGVldCIsImNyZWF0ZVRleHROb2RlIiwidXJsIiwiY2FsbGJhY2siLCJBY3RpdmVYT2JqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInNlbmQiLCJYRG9tYWluUmVxdWVzdCIsInhkciIsIm9ubG9hZCIsIm9uZXJyb3IiLCJtYXRjaE1lZGlhIiwibXNNYXRjaE1lZGlhIiwic2l6ZSIsImRvYyIsImRvY0VsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJib2R5IiwiaXNGYWtlQm9keSIsImN1cnJlbnRTaXplIiwib2Zmc2V0V2lkdGgiLCJyZW1vdmVDaGlsZCIsM10sIm1hcHBpbmdzIjoiQ0FBQSxRQUFBQSxHQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxHQUFBRSxHQUFBLGtCQUFBQyxVQUFBQSxPQUFBLEtBQUFGLEdBQUFDLEVBQUEsTUFBQUEsR0FBQUYsR0FBQSxFQUFBLElBQUFJLEVBQUEsTUFBQUEsR0FBQUosR0FBQSxFQUFBLElBQUFLLEdBQUEsR0FBQUMsT0FBQSx1QkFBQU4sRUFBQSxJQUFBLE1BQUFLLEdBQUFFLEtBQUEsbUJBQUFGLEVBQUEsR0FBQUcsR0FBQVgsRUFBQUcsSUFBQVMsV0FBQWIsR0FBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsR0FBQUUsR0FBQUQsRUFBQUksR0FBQSxHQUFBTCxFQUFBLE9BQUFJLEdBQUFGLEVBQUFBLEVBQUFGLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFk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QUNBaEYsRUFBQTZFLEVBQUEzRSxjQUFBLE9BQ0FnRixFQUFBRixFQUFBN0UsTUFBQUcsUUFzQkEsT0FuQkEyRSxJQUNBSCxFQUFBbkIsWUFBQXFCLEdBR0FoRixFQUFBRyxNQUFBQyxRQUFBLCtEQUVBNEUsRUFBQTdFLE1BQUFHLFNBQUEsTUFFQTBFLEVBQUFyQixZQUFBM0QsR0FDQTRFLEVBQUE1RSxFQUFBbUYsWUFFQUYsRUFDQUgsRUFBQU0sWUFBQUosSUFHQUEsRUFBQUksWUFBQXBGLEdBQ0FnRixFQUFBN0UsTUFBQUcsU0FBQTRFLEdBR0FOLEtBR0E1RCxNQUdBbkIsYURNTXdGLEdBQUcsU0FBU3RHLEVBQVFVLEVBQU9KLEdFNU5qQyx1QkZnT1ciLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgcmVtUG9seSA9IHJlcXVpcmUoJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvUkVNLXVuaXQtcG9seWZpbGwvanMvcmVtLmpzJyk7XG52YXIgdGVzdCA9IHJlcXVpcmUoJy4uL3Rlc3QuanMnKTsiLG51bGwsIihmdW5jdGlvbiAod2luZG93LCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyB0ZXN0IGZvciBSRU0gdW5pdCBzdXBwb3J0XG4gICAgdmFyIGNzc3JlbXVuaXQgPSAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuICAgICAgICAgICAgZGl2LnN0eWxlLmNzc1RleHQgPSAnZm9udC1zaXplOiAxcmVtOyc7XG5cbiAgICAgICAgcmV0dXJuICgvcmVtLykudGVzdChkaXYuc3R5bGUuZm9udFNpemUpO1xuICAgIH0sXG5cbiAgICAvLyBmaWx0ZXIgcmV0dXJuZWQgbGlua3MgZm9yIHN0eWxlc2hlZXRzXG4gICAgaXNTdHlsZVNoZWV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3R5bGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpbmsnKSxcbiAgICAgICAgICAgIGZpbHRlcmVkTGlua3MgPSBbXTtcblxuICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICggc3R5bGVzW2ldLnJlbC50b0xvd2VyQ2FzZSgpID09PSAnc3R5bGVzaGVldCcgJiYgc3R5bGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1ub3JlbScpID09PSBudWxsICkge1xuXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRMaW5rcy5wdXNoKCBzdHlsZXNbaV0uaHJlZiApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkTGlua3M7XG4gICAgfSxcblxuICAgcHJvY2Vzc0xpbmtzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3ByZXBhcmUgdG8gbWF0Y2ggZWFjaCBsaW5rXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIHhociggbGlua3NbaV0sIHN0b3JlQ1NTICk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcmVDU1MgPSBmdW5jdGlvbiAoIHJlc3BvbnNlLCBsaW5rICkge1xuXG4gICAgICAgIHByZUNTUy5wdXNoKHJlc3BvbnNlLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIENTU0xpbmtzLnB1c2gobGluayk7XG5cbiAgICAgICAgaWYoIENTU0xpbmtzLmxlbmd0aCA9PT0gbGlua3MubGVuZ3RoICl7XG4gICAgICAgICAgICBmb3IoIHZhciBqID0gMDsgaiA8ICBDU1NMaW5rcy5sZW5ndGg7IGorKyApe1xuICAgICAgICAgICAgICAgIG1hdGNoQ1NTKCBwcmVDU1Nbal0sIENTU0xpbmtzW2pdICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCAoIGxpbmtzID0gaW1wb3J0TGlua3Muc2xpY2UoMCkgKS5sZW5ndGggPiAwICl7IC8vYWZ0ZXIgZmluaXNoaW5nIGFsbCBjdXJyZW50IGxpbmtzLCBzZXQgbGlua3MgZXF1YWwgdG8gdGhlIG5ldyBpbXBvcnRzIGZvdW5kXG4gICAgICAgICAgICAgICAgQ1NTTGlua3MgPSBbXTtcbiAgICAgICAgICAgICAgICBwcmVDU1MgPSBbXTtcbiAgICAgICAgICAgICAgICBpbXBvcnRMaW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NMaW5rcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBidWlsZENTUygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1hdGNoQ1NTID0gZnVuY3Rpb24gKCBzaGVldENTUywgbGluayApIHsgLy8gY29sbGVjdCBhbGwgb2YgdGhlIHJ1bGVzIGZyb20gdGhlIHhociByZXNwb25zZSB0ZXh0cyBhbmQgbWF0Y2ggdGhlbSB0byBhIHBhdHRlcm5cbiAgICAgICAgdmFyIGNsZWFuID0gcmVtb3ZlTWVkaWFRdWVyaWVzKCBzaGVldENTUyApLnJlcGxhY2UoL1xcL1xcKltcXHNcXFNdKj9cXCpcXC8vZywgJycpLCAvLyByZW1vdmUgTWVkaWFRdWVyaWVzIGFuZCBjb21tZW50c1xuICAgICAgICAgICAgcGF0dGVybiA9IC9bXFx3XFxkXFxzXFwtXFwvXFxcXFxcW1xcXTosLidcIiooKTw+K34lI14kXz18QF0rXFx7W1xcd1xcZFxcc1xcLVxcL1xcXFwlIzohOywuJ1wiKigpXStcXGQqXFwuP1xcZCtyZW1bXFx3XFxkXFxzXFwtXFwvXFxcXCUjOiE7LC4nXCIqKCldKlxcfS9nLCAvL2ZpbmQgc2VsZWN0b3JzIHRoYXQgdXNlIHJlbSBpbiBvbmUgb3IgbW9yZSBvZiB0aGVpciBydWxlc1xuICAgICAgICAgICAgY3VycmVudCA9IGNsZWFuLm1hdGNoKHBhdHRlcm4pLFxuICAgICAgICAgICAgcmVtUGF0dGVybiA9L1xcZCpcXC4/XFxkK3JlbS9nLFxuICAgICAgICAgICAgcmVtQ3VycmVudCA9IGNsZWFuLm1hdGNoKHJlbVBhdHRlcm4pLFxuICAgICAgICAgICAgc2hlZXRQYXRoUGF0dGVybiA9IC8oLipcXC8pLyxcbiAgICAgICAgICAgIHNoZWV0UGF0aCA9IHNoZWV0UGF0aFBhdHRlcm4uZXhlYyhsaW5rKVswXSwgLy9yZWxhdGl2ZSBwYXRoIHRvIGNzcyBmaWxlIHNwZWNpZmllZCBpbiBAaW1wb3J0XG4gICAgICAgICAgICBpbXBvcnRQYXR0ZXJuID0gL0BpbXBvcnQgKD86dXJsXFwoKT9bJ1wiXT8oW14nXFwpXCJdKilbJ1wiXT9cXCk/W147XSovZ20sIC8vbWF0Y2hlcyBhbGwgQGltcG9ydCB2YXJpYXRpb25zIG91dGxpbmVkIGF0OiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQGltcG9ydFxuICAgICAgICAgICAgaW1wb3J0U3RhdGVtZW50O1xuXG4gICAgICAgIHdoaWxlKCAoaW1wb3J0U3RhdGVtZW50ID0gaW1wb3J0UGF0dGVybi5leGVjKHNoZWV0Q1NTKSkgIT09IG51bGwgKXtcbiAgICAgICAgICAgIGlmKCBpbXBvcnRTdGF0ZW1lbnRbMV0uaW5kZXhPZihcIi9cIikgPT09IDAgKSB7IC8vIGNoZWNrIGlmIHRoZSB2YWx1ZSBvZiBpbXBvcnRTdGF0ZW1lbnRbMV0gaXMgYSByb290IHJlbGF0aXZlIHBhdGgsIGluIHdoaWNoIGNhc2UgaXQgc2hvdWxkbid0IGJlIGNvbmNhdGVuYXRlZCB3aXRoIHNoZWV0UGF0aFxuICAgICAgICAgICAgICAgIGltcG9ydExpbmtzLnB1c2goIGltcG9ydFN0YXRlbWVudFsxXSApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRMaW5rcy5wdXNoKCBzaGVldFBhdGggKyBpbXBvcnRTdGF0ZW1lbnRbMV0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBjdXJyZW50ICE9PSBudWxsICYmIGN1cnJlbnQubGVuZ3RoICE9PSAwICl7XG4gICAgICAgICAgICBmb3VuZCA9IGZvdW5kLmNvbmNhdCggY3VycmVudCApOyAvLyBzYXZlIGFsbCBvZiB0aGUgYmxvY2tzIG9mIHJ1bGVzIHdpdGggcmVtIGluIGEgcHJvcGVydHlcbiAgICAgICAgICAgIGZvdW5kUHJvcHMgPSBmb3VuZFByb3BzLmNvbmNhdCggcmVtQ3VycmVudCApOyAvLyBzYXZlIGFsbCBvZiB0aGUgcHJvcGVydGllcyB3aXRoIHJlbVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGJ1aWxkQ1NTID0gZnVuY3Rpb24gKCkgeyAvLyBmaXJzdCBidWlsZCBlYWNoIGluZGl2aWR1YWwgcnVsZSBmcm9tIGVsZW1lbnRzIGluIHRoZSBmb3VuZCBhcnJheSBhbmQgdGhlbiBhZGQgaXQgdG8gdGhlIHN0cmluZyBvZiBydWxlcy5cbiAgICAgICAgdmFyIHBhdHRlcm4gPSAvW1xcd1xcZFxcc1xcLVxcL1xcXFwlIzosLidcIiooKV0rXFxkKlxcLj9cXGQrcmVtW1xcd1xcZFxcc1xcLVxcL1xcXFwlIzohLC4nXCIqKCldKls7fV0vZzsgLy8gZmluZCBwcm9wZXJ0aWVzIHdpdGggcmVtIHZhbHVlcyBpbiB0aGVtXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZm91bmQubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIHJ1bGVzID0gcnVsZXMgKyBmb3VuZFtpXS5zdWJzdHIoMCxmb3VuZFtpXS5pbmRleE9mKFwie1wiKSsxKTsgLy8gc2F2ZSB0aGUgc2VsZWN0b3IgcG9ydGlvbiBvZiBlYWNoIHJ1bGUgd2l0aCBhIHJlbSB2YWx1ZVxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBmb3VuZFtpXS5tYXRjaCggcGF0dGVybiApO1xuICAgICAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGo8Y3VycmVudC5sZW5ndGg7IGorKyApeyAvLyBidWlsZCBhIG5ldyBzZXQgb2Ygd2l0aCBvbmx5IHRoZSBzZWxlY3RvciBhbmQgcHJvcGVydGllcyB0aGF0IGhhdmUgcmVtIGluIHRoZSB2YWx1ZVxuICAgICAgICAgICAgICAgIHJ1bGVzID0gcnVsZXMgKyBjdXJyZW50W2pdO1xuICAgICAgICAgICAgICAgIGlmKCBqID09PSBjdXJyZW50Lmxlbmd0aC0xICYmIHJ1bGVzW3J1bGVzLmxlbmd0aC0xXSAhPT0gXCJ9XCIgKXtcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMgPSBydWxlcyArIFwiXFxufVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlQ1NTKCk7XG4gICAgfSxcblxuICAgIHBhcnNlQ1NTID0gZnVuY3Rpb24gKCkgeyAvLyByZXBsYWNlIGVhY2ggc2V0IG9mIHBhcmVudGhlc2VzIHdpdGggZXZhbHVhdGVkIGNvbnRlbnRcbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBmb3VuZFByb3BzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICBjc3NbaV0gPSBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KGZvdW5kUHJvcHNbaV0uc3Vic3RyKDAsZm91bmRQcm9wc1tpXS5sZW5ndGgtMykqZm9udFNpemUpICkgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9hZENTUygpO1xuICAgIH0sXG5cbiAgICBsb2FkQ1NTID0gZnVuY3Rpb24gKCkgeyAvLyByZXBsYWNlIGFuZCBsb2FkIHRoZSBuZXcgcnVsZXNcbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjc3MubGVuZ3RoOyBpKysgKXsgLy8gb25seSBydW4gdGhpcyBsb29wIGFzIG1hbnkgdGltZXMgYXMgY3NzIGhhcyBlbnRyaWVzXG4gICAgICAgICAgICBpZiggY3NzW2ldICl7XG4gICAgICAgICAgICAgICAgcnVsZXMgPSBydWxlcy5yZXBsYWNlKCBmb3VuZFByb3BzW2ldLGNzc1tpXSApOyAvLyByZXBsYWNlIG9sZCBydWxlcyB3aXRoIG91ciBwcm9jZXNzZWQgcnVsZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVtY3NzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3N0eWxlJyApO1xuICAgICAgICByZW1jc3Muc2V0QXR0cmlidXRlKCAndHlwZScsICd0ZXh0L2NzcycgKTtcbiAgICAgICAgcmVtY3NzLmlkID0gJ3JlbVJlcGxhY2UnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ2hlYWQnIClbMF0uYXBwZW5kQ2hpbGQoIHJlbWNzcyApOyAgIC8vIGNyZWF0ZSB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgaWYoIHJlbWNzcy5zdHlsZVNoZWV0ICkge1xuICAgICAgICAgICAgcmVtY3NzLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJ1bGVzOyAvLyBJRTggd2lsbCBub3Qgc3VwcG9ydCBpbm5lckhUTUwgb24gcmVhZC1vbmx5IGVsZW1lbnRzLCBzdWNoIGFzIFNUWUxFXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1jc3MuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBydWxlcyApICk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgeGhyID0gZnVuY3Rpb24gKCB1cmwsIGNhbGxiYWNrICkgeyAvLyBjcmVhdGUgbmV3IFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBhbmQgcnVuIGl0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvL3RyeSB0byBjcmVhdGUgYSByZXF1ZXN0IG9iamVjdFxuICAgICAgICAgICAgLy9hcnJhbmdpbmcgdGhlIHR3byBjb25kaXRpb25zIHRoaXMgd2F5IGlzIGZvciBJRTcvOCdzIGJlbmVmaXRcbiAgICAgICAgICAgIC8vc28gdGhhdCBpdCB3b3JrcyB3aXRoIGFueSBjb21iaW5hdGlvbiBvZiBBY3RpdmVYIG9yIE5hdGl2ZSBYSFIgc2V0dGluZ3MsIFxuICAgICAgICAgICAgLy9hcyBsb25nIGFzIG9uZSBvciB0aGUgb3RoZXIgaXMgZW5hYmxlZDsgYnV0IGlmIGJvdGggYXJlIGVuYWJsZWRcbiAgICAgICAgICAgIC8vaXQgcHJlZmVycyBBY3RpdmVYLCB3aGljaCBtZWFucyBpdCBzdGlsbCB3b3JrcyB3aXRoIGxvY2FsIGZpbGVzXG4gICAgICAgICAgICAvLyhOYXRpdmUgWEhSIGluIElFNy84IGlzIGJsb2NrZWQgYW5kIHRocm93cyBcImFjY2VzcyBpcyBkZW5pZWRcIixcbiAgICAgICAgICAgIC8vIGJ1dCBBY3RpdmVYIGlzIHBlcm1pdHRlZCBpZiB0aGUgdXNlciBhbGxvd3MgaXQgW2RlZmF1bHQgaXMgdG8gcHJvbXB0XSlcbiAgICAgICAgICAgIHZhciB4aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCA/ICggbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJykgfHwgbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJykgKSA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICB4aHIub3BlbiggJ0dFVCcsIHVybCwgdHJ1ZSApO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKXtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soeGhyLCB1cmwpO1xuICAgICAgICAgICAgICAgIH0gLy8gZWxzZSB7IGNhbGxiYWNrIGZ1bmN0aW9uIG9uIEFKQVggZXJyb3IgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgeGhyLnNlbmQoIG51bGwgKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICBpZiAoIHdpbmRvdy5YRG9tYWluUmVxdWVzdCApIHtcbiAgICAgICAgICAgICAgICB2YXIgeGRyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgeGRyLm9wZW4oJ2dldCcsIHVybCk7XG4gICAgICAgICAgICAgICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh4ZHIsIHVybCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHhkciBsb2FkIGZhaWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHhkci5zZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIHF1ZXJpZXMuXG4gICAgcmVtb3ZlTWVkaWFRdWVyaWVzID0gZnVuY3Rpb24oY3NzKSB7XG4gICAgICAgIC8vIFRlc3QgZm9yIE1lZGlhIFF1ZXJ5IHN1cHBvcnRcbiAgICAgICAgaWYgKCAhd2luZG93Lm1hdGNoTWVkaWEgJiYgIXdpbmRvdy5tc01hdGNoTWVkaWEgKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgbWVkaWEgcXVlcmllcywgd2UgZmluZCBhbGwgQG1lZGlhIGRlY2xhcmF0aW9ucyBpbiB0aGUgQ1NTIGFuZCByZW1vdmUgdGhlbS5cbiAgICAgICAgICAgIC8vIE5vdGU6IFNpbmNlIEBydWxlcyBjYW4ndCBiZSBuZXN0ZWQgaW4gdGhlIENTUyBzcGVjLCB3ZSdyZSBzYWZlIHRvIGp1c3QgY2hlY2sgZm9yIHRoZSBjbG9zZXN0IGZvbGxvd2luZyBcIn19XCIgdG8gdGhlIFwiQG1lZGlhXCIuXG4gICAgICAgICAgICBjc3MgPSBjc3MucmVwbGFjZSgvQG1lZGlhW1xcc1xcU10qP1xcfVxccypcXH0vZywgXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3NzO1xuICAgIH07XG5cbiAgICBpZiggIWNzc3JlbXVuaXQoKSApeyAvLyB0aGlzIGNoZWNrcyBpZiB0aGUgcmVtIHZhbHVlIGlzIHN1cHBvcnRlZFxuICAgICAgICB2YXIgcnVsZXMgPSAnJywgLy8gaW5pdGlhbGl6ZSB0aGUgcnVsZXMgdmFyaWFibGUgaW4gdGhpcyBzY29wZSBzbyBpdCBjYW4gYmUgdXNlZCBsYXRlclxuICAgICAgICAgICAgbGlua3MgPSBpc1N0eWxlU2hlZXQoKSwgLy8gaW5pdGlhbGl6ZSB0aGUgYXJyYXkgaG9sZGluZyB0aGUgc2hlZXRzIHVybHMgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgaW1wb3J0TGlua3MgPSBbXSwgLy9pbml0aWFsaXplIHRoZSBhcnJheSBob2xkaW5nIHRoZSBpbXBvcnQgc2hlZXQgdXJscyBmb3IgdXNlIGxhdGVyXG4gICAgICAgICAgICBmb3VuZCA9IFtdLCAvLyBpbml0aWFsaXplIHRoZSBhcnJheSBob2xkaW5nIHRoZSBmb3VuZCBydWxlcyBmb3IgdXNlIGxhdGVyXG4gICAgICAgICAgICBmb3VuZFByb3BzID0gW10sIC8vIGluaXRpYWxpemUgdGhlIGFycmF5IGhvbGRpbmcgdGhlIGZvdW5kIHByb3BlcnRpZXMgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgcHJlQ1NTID0gW10sIC8vIGluaXRpYWxpemUgYXJyYXkgdGhhdCBob2xkcyBjc3MgYmVmb3JlIGJlaW5nIHBhcnNlZFxuICAgICAgICAgICAgQ1NTTGlua3MgPSBbXSwgLy9pbml0aWFsaXplIGFycmF5IGhvbGRpbmcgY3NzIGxpbmtzIHJldHVybmVkIGZyb20geGhyXG4gICAgICAgICAgICBjc3MgPSBbXSwgLy8gaW5pdGlhbGl6ZSB0aGUgYXJyYXkgaG9sZGluZyB0aGUgcGFyc2VkIHJ1bGVzIGZvciB1c2UgbGF0ZXJcbiAgICAgICAgICAgIGZvbnRTaXplID0gJyc7XG5cbiAgICAgICAgLy8gTm90aWNlOiByZW0gaXMgYSBcInJvb3QgZW1cIiB0aGF0IG1lYW5zIHRoYXQgaW4gY2FzZSB3aGVuIGh0bWwgZWxlbWVudCBzaXplIHdhcyBjaGFuZ2VkIGJ5IGNzc1xuICAgICAgICAvLyBvciBzdHlsZSB3ZSBzaG91bGQgbm90IGNoYW5nZSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZm9udFNpemUgdG8gMWVtIC0gb25seSBib2R5IHNpemUgc2hvdWxkIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gdG8gMWVtIGZvciBjYWxjdWxhdGlvblxuXG4gICAgICAgIGZvbnRTaXplID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSBkb2N1bWVudCxcbiAgICAgICAgICAgICAgICBkb2NFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICAgICAgICBib2R5ID0gZG9jLmJvZHkgfHwgZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKSxcbiAgICAgICAgICAgICAgICBpc0Zha2VCb2R5ID0gIWRvYy5ib2R5LFxuICAgICAgICAgICAgICAgIGRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2l6ZSA9IGJvZHkuc3R5bGUuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgc2l6ZTtcblxuICAgICAgICAgICAgaWYgKCBpc0Zha2VCb2R5ICkge1xuICAgICAgICAgICAgICAgIGRvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoIGJvZHkgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGl2LnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6MWVtOyBwb3NpdGlvbjphYnNvbHV0ZTsgdmlzaWJpbGl0eTpoaWRkZW47IHBhZGRpbmc6IDA7JztcblxuICAgICAgICAgICAgYm9keS5zdHlsZS5mb250U2l6ZSA9ICcxZW0nO1xuXG4gICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcbiAgICAgICAgICAgIHNpemUgPSBkaXYub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgICAgIGlmICggaXNGYWtlQm9keSApIHtcbiAgICAgICAgICAgICAgICBkb2NFbGVtZW50LnJlbW92ZUNoaWxkKCBib2R5ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcbiAgICAgICAgICAgICAgICBib2R5LnN0eWxlLmZvbnRTaXplID0gY3VycmVudFNpemU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9KCkpO1xuXG4gICAgICAgIHByb2Nlc3NMaW5rcygpO1xuICAgIH0gLy8gZWxzZSB7IGRvIG5vdGhpbmcsIHlvdSBhcmUgYXdlc29tZSBhbmQgaGF2ZSBSRU0gc3VwcG9ydCB9XG5cbn0pKHdpbmRvdyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHRlc3RpbmcgPSBcInRoaXMgaXMgYSB0ZXN0IHZhcmlhYmxlIGZvciB1c2Ugd2l0aCBicm93c2VyaWZ5XCI7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9