@charset "UTF-8";

/*
* Vertical Rhythm Properties
* Do this by using various Compass Vertical Rhythm functions and mixins
* This will automatically set line(s) to be $base-line-height * font size
* The lead and or trail multiple can be changed using $leadOrTrailLinesUsed. It is 1 by default (i.e. 1 = $base-line-height * 1)
* Use $top-bottom-both to defined where the lead/trail is used on the element, it is bottom by default
*/
@mixin verticalRhythmProps(
  $theFontSize: null,
  $useMargin: true,
  $top-bottom-both: bottom,
  $differentLineHeight: $theFontSize,
  $leadOrTrailLinesUsed: 1,
  $debugVerticalRhythm: false
  ) {
  $new-line-height: if($differentLineHeight != $theFontSize, lines-for-font-size($differentLineHeight) * $base-line-height, lines-for-font-size($theFontSize) * $base-line-height);
  $lead-or-trail-num: splitUnitAndValue($base-font-size, true);
  //font size and line height
  @if $theFontSize != null {
    font-size: $theFontSize;
    line-height: $new-line-height;
  }
  @if $theFontSize == null and $differentLineHeight != null {
    line-height: $new-line-height;
  }
  @if $useMargin == false {
    @if $debugVerticalRhythm == true {
      @include debug-vertical-alignment;
    }
    @if $top-bottom-both == top {
      @include padding-leader($lines: $leadOrTrailLinesUsed, $font-size: $base-font-size);
      @include padding-trailer($lines: 0, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == both {
      @include padding-leader($lines: $leadOrTrailLinesUsed, $font-size: $base-font-size);
      @include padding-trailer($lines: $leadOrTrailLinesUsed, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == bottom {
      @include padding-leader($lines: 0, $font-size: $base-font-size);
      @include padding-trailer($lines: $leadOrTrailLinesUsed, $font-size: $base-font-size);
    }
  }
  @else {
    @if $debugVerticalRhythm == true {
      @include debug-vertical-alignment;
    }
    @if $top-bottom-both == top {
      @include rhythm-margins($leader: $leadOrTrailLinesUsed, $trailer: 0, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == both {
      @include rhythm-margins($leader: $leadOrTrailLinesUsed, $trailer: $leader, $font-size: $base-font-size);
    }
    @else if $top-bottom-both == bottom {
      @include rhythm-margins($leader: 0, $trailer: $leadOrTrailLinesUsed, $font-size: $base-font-size);
    }
  }
}

/*
* No Vertical Rhythm
* Remove vertical rhythm properties
*/
@mixin noVerticalRhythm($verticalMargins: both, $verticalPadding: both, $lineHeight: null) {
  //reset vertical padding
  @if $verticalPadding == top {
    padding-top: 0;
  }
  @else if $verticalPadding == bottom {
    padding-bottom: 0;
  }
  @else if $verticalPadding == both {
    padding-top: 0;
    padding-bottom: 0;
  }
  @else {
    @error "The $verticalPadding argument, must be one of the following: top, bottom, or both.";
  }
  //reset vertical margins
  @if $verticalMargins == top {
    margin-top: 0;
  }
  @else if $verticalMargins == bottom {
    margin-bottom: 0;
  }
  @else if $verticalMargins == both {
    margin-top: 0;
    margin-bottom: 0;
  }
  @else {
    @error "The $verticalMargins argument, must be one of the following: top, bottom, or both.";
  }
  //set a new line height
  @if $lineHeight != null {
    line-height: $lineHeight;
  }
}

/*
Float
* The float Mixin accepts any value of float
*/
@mixin float($float: left) {
  float: $float;
}

/*
Clearfix
* fix float box issues
*/

@mixin cf {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*
 * Placeholder image
 * This can be used to add a placeholder image of any size, background color, text color, and placeholder text, as a css background
 */
@mixin placeholderImg($width: 500, $height: $width, $bgColor: $grey, $color: $black, $placeholder: null) {
  @if $placeholder != null {
    background: url(http://placehold.it/#{$width}x#{$height}/#{$bgColor}/#{$color}&text=#{$placeholder});
  }
  @else {
    background: url(http://placehold.it/#{$width}x#{$height}/#{$bgColor}/#{$color});
  }
  background-size: 100% 100%;
}

/*
* Make Horizontal
* Position block elements horizontally without floating
*/
@mixin makeHorizontal {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

/*
 * No Horizontal Center
 * This removes horizontal centering
 */
@mixin noHorizontalCenter($marginLeft: 0, $marginRight: 0) {
  margin-left: $marginLeft;
  margin-right: $marginRight;
}

/*
 * Horizontal Center
 * This adds horizontal centering for block level elements
 */
@mixin horizontalCenter {
  margin-left: auto;
  margin-right: auto;
}

/*
 * Button Colors
 * Use this mixin to update the scales class button colors.
 * The scales default is the cyan button.
 * This defaults to the purple button.
 */

@mixin buttonColors($bg: $dark-purple, $color: $white, $hoverBg: $purple) {
  background-color: $bg;
  color: $color;
  &:hover, &:active {
    background-color: $hoverBg;
    color: $color;
  }
}

/*
* Body Font Mixin
* used to set body font on something that would otherwise not have it
*/
@mixin bodyFont {
  font-family: $body-font;
}

/*
* Heading/Title Font Mixin
* used to set heading font on something that would otherwise not have it
*/
@mixin titleFont {
  font-family: $title-font;
}

/*
* Text Anchors Mixin
* The default values for this mixin are used to white link that live in a text block, and are on a colored background.
* This mixin can be used to set text color and text decoration.
*/
@mixin link($textColor: if(variable-exists(medium-cyan), $white, #FFFFFF), $textDecoration: underline, $hover: $light-grey, $activeTextDecoration: $textDecoration) {
  &:link, &:visited {
    /* color */
    color: $textColor;
    /* font */
    text-decoration: $textDecoration;
  }
  &:hover, &:active {
    /* color */
    color: $hover;
    /* font */
    text-decoration: $activeTextDecoration;
  }
}

/* Visibility Toggle Mixin */
@mixin visible {
  /* box model */
  display: none;
  /* breakpoint */
  @include breakpoint($screen $md-lg) {
    //this make the container fit to the list items
    display: table !important;
  }
}

/* Submenu Dropdown Mixin */
@mixin submenu-nav {
  /* box model */
  position: absolute;
  left: 0;
  display: none;
  padding: 0;
  list-style: none;
  z-index: 9;
  width: 100%;
  height: auto;
  margin: 0;
  /* color */
  background: $white;
}

/*
* Fake overlapping image for full width container
* @para $mainBgColor - This is the main background color that should contrast the surrounding background colors.
* @para $hideColor - This is the background color that should be the same as the background colors of the surrounding containers, to make it seem as if it is part of the surrounding backgrounds.
* @para $overlapPaddingHeight - This is the distance from the top of the container that should appear to blend with the surrounding containers.
* @para $middleHeight - This is the height of the background area that should contrast the surrounding areas.
* Keep in mind that image should probably be the same size as $overlapPaddingHeight + $middleHeight + $overlapPaddingHeight
*/
@mixin fakeOverlapImageContainer($mainBgColor, $hideColor, $overlapPaddingHeight, $middleHeight) {
  /* box model */
  height: auto;
  /* background color */
  background-color: $mainBgColor;
  /* breakpoint */
  @include breakpoint($screen $md) {
    /* box model */
    height: 100%;
    background: linear-gradient(to bottom, $hideColor, $hideColor $overlapPaddingHeight, $mainBgColor $overlapPaddingHeight, $mainBgColor $middleHeight, $hideColor $middleHeight);
  }
}

/*
* Client Review Color Mixin
* Used to create propeties for a client review section
*/
@mixin clientReviewColors($imgBorderColor, $linkColorHover, $linkColor: $imgBorderColor) {
  img {
    /* color */
    border-color: $imgBorderColor;
  }
  a {
    /* color */
    background-color: $linkColor;
    &:hover,
    &:active {
      /* color */
      background-color: $linkColorHover;
    }
  }
}

/*
* Vertical Align Block Center
* Used to vertically align elements of unknown height
* A prerequisite of using this mixin is to use a position other than static, on the parent of the element this is used on.
*/
@mixin vAlignCenterBlock($direction: right, $directionPos: 0) {
  /* box model */
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  @if $direction == left {
    left: $directionPos;
  }
  @if $direction == right {
    right: $directionPos;
  }
}

/*
* Reset Colors
* This mixin should be used to reset any background and text colors for print (to black and white)
*/
@mixin resetPrintColors($textColor: if(variable-exists(medium-cyan), $black, #000000), $bgColor: transparent, $fill: null, $justProps: false) {
  @if $justProps == false {
    @include breakpoint($print $start) {
      @if $bgColor != null {
        /* color */
        background-color: $bgColor;
      }
      @if $fill != null {
          /* color */
          fill: $fill;
      }
      @if $textColor != null {
        /* color */
        color: $textColor;
        //this is to help reset a link
        &:link {
          color: $textColor;
        }
      }
    }
  }
  @else {
    @if $bgColor != null {
      /* color */
      background-color: $bgColor;
    }
    @if $fill != null {
        /* color */
        fill: $fill;
    }
    @if $textColor != null {
      /* color */
      color: $textColor;
      //this is to help reset a link
      &:link {
        color: $textColor;
      }
    }
  }
}

/*
* Text Size Breakpoint(s) Mixins
*/
@mixin h1-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h1-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h1-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h1-font-size-max);
  }
}

@mixin h2-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h2-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h2-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h2-font-size-max);
  }
}

@mixin h3-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h3-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h3-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h3-font-size-max);
  }
}

@mixin h4-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h4-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h4-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h4-font-size-max);
  }
}

@mixin h5-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h5-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h5-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h5-font-size-max);
  }
}

@mixin h6-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($h6-font-size-md);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($h6-font-size-max);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($h6-font-size-max);
  }
}

@mixin body-breakpoints {
  @include breakpoint($screen $md) {
    @include verticalRhythmProps($body-font-size-md, $leadOrTrailLinesUsed: 0);
  }
  @include breakpoint($screen $max) {
    @include verticalRhythmProps($body-font-size-max, $leadOrTrailLinesUsed: 0);
  }
  @include breakpoint($print $start) {
    @include verticalRhythmProps($body-font-size-max, $leadOrTrailLinesUsed: 0);
  }
}

@mixin atMedia($screenSize) {
  @if $screenSize == xs{
    @media only screen and (max-width: 767px ){@content;}
  }
  @else if $screenSize == s{
    @media only screen and (min-width: 768px ){@content;}
  }
  @else if $screenSize == m{
    @media only screen and (min-width: 992px ){@content;}
  }
}